rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Tickets collection
    match /tickets/{ticketId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.user_ref.id || 
         request.auth.uid == resource.data.imecon_ref.id);
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.user_ref.id &&
        request.resource.data.keys().hasAll(['user_ref', 'imecon_ref', 'status', 'ticket_code', 'payment_intent_id', 'created_at', 'expires_at', 'type']) &&
        request.resource.data.status in ['authorized'] &&
        request.resource.data.type in ['dm_consultation'] &&
        request.resource.data.expires_at > request.time &&
        request.resource.data.user_ref is path &&
        request.resource.data.imecon_ref is path;
      
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.user_ref.id || 
         request.auth.uid == resource.data.imecon_ref.id) &&
        request.resource.data.keys().hasAll(['user_ref', 'imecon_ref', 'status', 'ticket_code', 'payment_intent_id', 'created_at', 'expires_at', 'type']) &&
        request.resource.data.status in ['authorized', 'captured', 'cancelled', 'approved', 'rejected'] &&
        request.resource.data.user_ref == resource.data.user_ref &&
        request.resource.data.imecon_ref == resource.data.imecon_ref &&
        request.resource.data.ticket_code == resource.data.ticket_code &&
        request.resource.data.payment_intent_id == resource.data.payment_intent_id &&
        request.resource.data.type == resource.data.type;
      
      allow delete: if false; // Tickets should not be deleted
    }
    
    // Payment intents collection
    match /payment_intents/{intentId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['userId', 'imeconId', 'amount', 'status', 'ticket_code', 'createdAt']) &&
        request.resource.data.amount > 0 &&
        request.resource.data.status in ['requires_payment_method', 'requires_confirmation', 'requires_action', 'processing', 'succeeded', 'canceled'];
      
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.imeconId == resource.data.imeconId &&
        request.resource.data.amount == resource.data.amount &&
        request.resource.data.ticket_code == resource.data.ticket_code;
      
      allow delete: if false; // Payment intents should not be deleted
    }
    
    // Chat rooms collection
    match /chat_rooms/{roomId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.keys().hasAll(['participants', 'created_at', 'last_message', 'status']) &&
        request.resource.data.status in ['pending', 'active', 'ended'] &&
        request.resource.data.participants.size() == 2;
    }
    
    // Messages subcollection
    match /chat_rooms/{roomId}/messages/{messageId} {
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(roomId)).data.participants;
      
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/chat_rooms/$(roomId)).data.participants &&
        request.auth.uid == request.resource.data.sender_id &&
        request.resource.data.keys().hasAll(['sender_id', 'content', 'timestamp', 'type']) &&
        request.resource.data.type in ['text', 'image'];
      
      allow update, delete: if false; // Messages should not be updated or deleted
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}